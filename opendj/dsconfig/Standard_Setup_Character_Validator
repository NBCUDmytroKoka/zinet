################################################
#	Copyright (c) 2015-18 zibernetics, Inc.
#
#	Licensed under the Apache License, Version 2.0 (the "License");
#	you may not use this file except in compliance with the License.
#	You may obtain a copy of the License at
#	
#	    http://www.apache.org/licenses/LICENSE-2.0
#	
#	Unless required by applicable law or agreed to in writing, software
#	distributed under the License is distributed on an "AS IS" BASIS,
#	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#	See the License for the specific language governing permissions and
#	limitations under the License.
#
################################################

# This command creates a characters validator

for xInstanceName in ${localCharValidatorList}; do
    xInstanceSettings=${OPENDJ_PASSWD_CHARS[$xInstanceName]}
    [ -z "${xInstanceSettings}" ] && continue
    IFS=',' read -ra xInstanceArr <<< "${xInstanceSettings}"

    setDirectives=
    sValidatorName=Standard_Character_Validator-${xInstanceName}
    sValidatorNameQ="'Standard_Character_Validator-${xInstanceName}'"

    iLowerChars=0
    iUpperChars=0
    iNumChars=0
    iSpecialChars=0
    iMinCharSets=3
    
    for g in "${xInstanceArr[@]}"; do
        key=${g%%=*}
        value=${g#*=}

        case "$key" in
            validator-name)
                [[ "${value}" != "${value% *}" ]] && \
                sValidatorNameQ="'${value}'" || \
                sValidatorNameQ="${value}"

                sValidatorName="${value}"
                ;;
            character-set-ranges-lower)
                iLowerChars="${value}"
                ;;
            character-set-ranges-upper)
                iUpperChars="${value}"
                ;;
            character-set-ranges-num)
                iNumChars="${value}"
                ;;
            character-set-special)
                iSpecialChars="${value}"
                ;;
            min-character-sets)
                iMinCharSets="${value}"
                ;;
            *)
                [[ "${value}" != "${value% *}" ]] && \
                setDirectives="${setDirectives} --set ${key}:'${value}'" || \
                setDirectives="${setDirectives} --set ${key}:${value}"
                ;;
        esac
    done

    existingProps=$(${OPENDJ_HOME_DIR}/bin/dsconfig get-password-validator-prop \
                        --hostname ${localTargetHost}                           \
                        --port ${OPENDJ_ADMIN_PORT}                             \
                        --bindDN "${localLDAPBindDN}"                           \
                        --bindPassword ${localLDAPBindPW}                       \
                        --validator-name "${sValidatorName}" -E --trustAll | grep -v -e "^Property" -e "^-" -e "does not exist")
    [ -z "${existingProps}" ] && subOption=create-password-validator || subOption=set-password-validator-prop

    tmpfile=$(mktemp /tmp/.XXXXXXXXXXXX)

    echo
    echo "#### ${xInstanceName} ==> ${subOption} - ${sValidatorName}"
    cat <<- EOF > ${tmpfile}
    ${OPENDJ_HOME_DIR}/bin/dsconfig ${subOption}                            \
    --hostname ${localTargetHost}                                           \
    --port ${OPENDJ_ADMIN_PORT}                                             \
    --bindDN "${localLDAPBindDN}"                                           \
    --bindPassword ${localLDAPBindPW}                                       \
    --validator-name ${sValidatorNameQ}                                     \
    --set enabled:true                                                      \
    --set character-set-ranges:${iLowerChars}:'a-z'                         \
    --set character-set-ranges:${iUpperChars}:'A-Z'                         \
    --set character-set-ranges:${iNumChars}:'0-9'                           \
    --set character-set:${iSpecialChars}:'!#\$%&()*+,-./:;\\<=>?@[]^_\`{|}~' \
    --set min-character-sets:${iMinCharSets}                                \
    $setDirectives                                                          \
    $([ "${subOption}" == "create-password-validator" ] && echo "--type character-set") \
        --trustAll                              \
    --no-prompt
	EOF

    source ${tmpfile}
    if [ $? -eq 0 ]; then
        echo
        ${OPENDJ_HOME_DIR}/bin/dsconfig get-password-validator-prop \
        --hostname ${localTargetHost}                           \
        --port ${OPENDJ_ADMIN_PORT}                             \
        --bindDN "${localLDAPBindDN}"                           \
        --bindPassword ${localLDAPBindPW}                       \
        --validator-name "${sValidatorName}" -E --trustAll

        rm ${tmpfile}
    else
        echo "#### ERROR EXECUTING ${xInstanceName} ==> ${subOption} - ${sValidatorName}"
        rm ${tmpfile}
        return 1
    fi
done
