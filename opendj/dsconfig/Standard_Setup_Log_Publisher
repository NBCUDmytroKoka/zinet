################################################
#	Copyright (c) 2015-18 zibernetics, Inc.
#
#	Licensed under the Apache License, Version 2.0 (the "License");
#	you may not use this file except in compliance with the License.
#	You may obtain a copy of the License at
#	
#	    http://www.apache.org/licenses/LICENSE-2.0
#	
#	Unless required by applicable law or agreed to in writing, software
#	distributed under the License is distributed on an "AS IS" BASIS,
#	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#	See the License for the specific language governing permissions and
#	limitations under the License.
#
################################################

# This command creates a log publisher

for xInstanceName in ${localLogPublisherList}; do
    xInstanceSettings=${OPENDJ_LOG_PUBLISHERS[$xInstanceName]}
    [ -z "${xInstanceSettings}" ] && continue
    IFS=',' read -ra xInstanceArr <<< "${xInstanceSettings}"

    setDirectives=
    sPublisherName=
    sPublisherNameQ=
    sType=
    sEnabled="--set enabled:true"
    
    for g in "${xInstanceArr[@]}"; do
        key=${g%%=*}
        value=${g#*=}

        case "$key" in
            publisher-name)
                [[ "${value}" != "${value% *}" ]] && \
                sPublisherNameQ="'${value}'" || \
                sPublisherNameQ="${value}"

                sPublisherName="${value}"
                ;;
            type)
                sType="${value}"
                ;;
            enabled)
                sEnabled="--set enabled:${value}"
                ;;
            config-file)
                [[ "${value}" != "${value% *}" ]] && \
                setDirectives="${setDirectives} --set ${key}:'${opendjCfgDir}/config/${value}'" || \
                setDirectives="${setDirectives} --set ${key}:${opendjCfgDir}//config/${value}"
                ;;
            *)
                [[ "${value}" != "${value% *}" ]] && \
                setDirectives="${setDirectives} --set ${key}:'${value}'" || \
                setDirectives="${setDirectives} --set ${key}:${value}"
                ;;
        esac
    done

    if [ ! -z "{sPublisherName}" ] && [ ! -z "{sType}" ]; then
        existingProps=$(${OPENDJ_HOME_DIR}/bin/dsconfig get-log-publisher-prop \
                            --hostname ${localTargetHost}                           \
                            --port ${OPENDJ_ADMIN_PORT}                             \
                            --bindDN "${localLDAPBindDN}"                           \
                            --bindPassword ${localLDAPBindPW}                       \
                            --publisher-name "${sPublisherName}" -E --trustAll | grep -v -e "^Property" -e "^-" -e "does not exist")
        [ -z "${existingProps}" ] && subOption=create-log-publisher || subOption=set-log-publisher-prop

        tmpfile=$(mktemp /tmp/.XXXXXXXXXXXX)

        echo
        echo "#### ${xInstanceName} ==> ${subOption} - ${sPublisherName}"
        cat <<- EOF > ${tmpfile}
        ${OPENDJ_HOME_DIR}/bin/dsconfig ${subOption}    \
        --hostname ${localTargetHost}               \
        --port ${OPENDJ_ADMIN_PORT}                 \
        --bindDN "${localLDAPBindDN}"               \
        --bindPassword ${localLDAPBindPW}           \
        --publisher-name ${sPublisherNameQ}         \
        $([ "${subOption}" == "create-log-publisher" ] && echo "--type ${sType}") \
        $setDirectives                              \
        $sEnabled                                   \
        --trustAll                                  \
        --no-prompt
		EOF

        source ${tmpfile}
        if [ $? -eq 0 ]; then
            ${OPENDJ_HOME_DIR}/bin/dsconfig get-log-publisher-prop \
            --hostname ${localTargetHost}                   \
            --port ${OPENDJ_ADMIN_PORT}                     \
            --bindDN "${localLDAPBindDN}"                   \
            --bindPassword ${localLDAPBindPW}               \
            --publisher-name "${sPublisherName}" -E --trustAll
        
            rm ${tmpfile}
        else
            echo "####ERROR EXECUTING ${xInstanceName} ==> ${subOption} - ${sPublisherName}"
            rm ${tmpfile}
            return 1
        fi
    else
        echo "#### ERROR creating Plugin - plugin name or type"
        return 1
    fi
done
