################################################
#	Copyright (c) 2015-18 zibernetics, Inc.
#
#	Licensed under the Apache License, Version 2.0 (the "License");
#	you may not use this file except in compliance with the License.
#	You may obtain a copy of the License at
#	
#	    http://www.apache.org/licenses/LICENSE-2.0
#	
#	Unless required by applicable law or agreed to in writing, software
#	distributed under the License is distributed on an "AS IS" BASIS,
#	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#	See the License for the specific language governing permissions and
#	limitations under the License.
#
################################################

#This command creates a password policy based on all the password validators created above:

for xInstanceName in ${localPolicyCfgList}; do
    xInstanceSettings=${OPENDJ_PASSWD_POLICY[$xInstanceName]}
    [ -z "${xInstanceSettings}" ] && continue
    IFS=',' read -ra xInstanceArr <<< "${xInstanceSettings}"

    setDirectives=
    policyName=Standard_Password_Policy-${xInstanceName}
    policyNameQ="'Standard_Password_Policy-${xInstanceName}'"

    for g in "${xInstanceArr[@]}"; do
        key=${g%%=*}
        value=${g#*=}

        case "$key" in
            policy-name)
                [[ "${value}" != "${value% *}" ]] && \
                policyNameQ="'${value}'" || \
                policyNameQ="${value}"

                policyName="${value}"
                ;;
            last-login-time-format)
                setDirectives="${setDirectives} --set ${key}:\"${value}\""
                ;;
            *)
                [[ "${value}" != "${value% *}" ]] && \
                setDirectives="${setDirectives} --set ${key}:'${value}'" || \
                setDirectives="${setDirectives} --set ${key}:${value}"
                ;;
        esac
    done

    if [ ! -z "${setDirectives}" ] && [ ! -z "${policyName}" ]; then
        existingProps=$(${OPENDJ_HOME_DIR}/bin/dsconfig get-password-policy-prop    \
                            --hostname ${localTargetHost}                           \
                            --port ${OPENDJ_ADMIN_PORT}                             \
                            --bindDN "${localLDAPBindDN}"                           \
                            --bindPassword ${localLDAPBindPW}                       \
                            --policy-name "${policyName}" -E --trustAll | grep -v -e "^Property" -e "^-" -e "does not exist")
        [ -z "${existingProps}" ] && subOption=create-password-policy || subOption=set-password-policy-prop

        tmpfile=$(mktemp /tmp/.XXXXXXXXXXXX)

        echo
        echo "#### ${xInstanceName} ==> ${subOption} - ${policyName}"
        cat <<- EOF > ${tmpfile}
        ${OPENDJ_HOME_DIR}/bin/dsconfig ${subOption}  \
        --hostname ${localTargetHost}       \
        --port ${OPENDJ_ADMIN_PORT}         \
        --bindDN "${localLDAPBindDN}"       \
        --bindPassword ${localLDAPBindPW}   \
        --policy-name ${policyNameQ}        \
        ${setDirectives}                    \
        $([ "${subOption}" == "create-password-policy" ] && echo "--type password-policy") \
        --trustAll                          \
        --no-prompt
		EOF

        source ${tmpfile}
        if [ $? -eq 0 ]; then
            echo
            ${OPENDJ_HOME_DIR}/bin/dsconfig get-password-policy-prop    \
            --hostname ${localTargetHost}       \
            --port ${OPENDJ_ADMIN_PORT}         \
            --bindDN "${localLDAPBindDN}"       \
            --bindPassword ${localLDAPBindPW}   \
            --policy-name "${policyName}" -E --trustAll

            rm ${tmpfile}
        else
            echo "#### ERROR EXECUTING ${xInstanceName} ==> ${subOption} - ${policyName}"
            rm ${tmpfile}
            return 1
        fi
    else
        echo "#### Error:  no backend password policy properties were defined"   
        return 1 
    fi
done

